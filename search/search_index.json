{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is the collection of the Aegisub scripts made by me along with detailed explanation for its usage.</p> <p>Scripts that I've written can broadly be classified into two types: scripts that are in Dependency Control and those that are not. Scripts that are in Dependency Control are those scripts that are ready for broad public usage and those which aren't are either still in development or are not useful enough to be added.</p>"},{"location":"#installing-aegisub-scripts","title":"Installing Aegisub Scripts","text":"<p>The guide to installing both scripts that are available in Dependency Control and those that aren't is explained in this guide</p>"},{"location":"#scriptfeature-request-and-bug-reporting","title":"Script/Feature Request and Bug Reporting","text":"<p>If you want to report bug or ask for a feature to be added in an already existing script or have an idea for a new script that you want to be made, you can reach out in the following places.</p> <ul> <li>Github Issues</li> <li>DM me at discord (<code>PhosCity#4786</code>)</li> <li>I haunt the hallways of GJM fansub discord server pretty regularly.</li> </ul> <p>I can't assure I'll accept all requests but if it's good enough and possible by my knowledge, I'll try to get it made.</p>"},{"location":"ASSFoundation/","title":"Introduction","text":"<p>ASSFoundation, henceforth called assf, is a module that aims to make working with subtitle object efficient. It does most of the heavy lifting so that we can do more with less lines of code in our script. No need to use messy regular expressions, define the types of tags and the nature of their values. No need to reinvent the wheel and write functions to work in subtitle object or write your own module for common things.</p> <p>This guide assumes that you already know how to write Aegisub scripts and know the basics of Moonscript.</p> <p>Here's the very basics:</p> <pre><code>export script_name = \"name of the script\"\nexport script_description = \"description of your script\"\nexport script_version = \"0.0.1\"\nexport script_author = \"you\"\nexport script_namespace = \"namespace of your script\"\nDependencyControl = require \"l0.DependencyControl\"\ndepctrl = DependencyControl{\nfeed: \"\",\n{\n{\"a-mo.LineCollection\", version: \"1.3.0\", url: \"https://github.com/TypesettingTools/Aegisub-Motion\",\nfeed: \"https://raw.githubusercontent.com/TypesettingTools/Aegisub-Motion/DepCtrl/DependencyControl.json\"},\n{\"l0.ASSFoundation\", version: \"0.4.0\", url: \"https://github.com/TypesettingTools/ASSFoundation\",\nfeed: \"https://raw.githubusercontent.com/TypesettingTools/ASSFoundation/master/DependencyControl.json\"}\n}\n}\nLineCollection, ASS = depctrl\\requireModules!\nlogger = depctrl\\getLogger!\nfunctionName = (sub, sel, act) -&gt;\n-- stuff goes here\ndepctrl\\registerMacro functionName\n</code></pre> <p>This is the framework that all your scripts will have. Here we import LineCollection and assf and define a function called functionName. This function name is what we register in aegisub in the last line. Everything we do below will go inside the function where <code>--stuff goes here</code> is written. We also define logger for logging purposes but if you don't need to log anything, you can remove that line.</p>"},{"location":"ASSFoundation/#linecollection","title":"LineCollection","text":"<p>LineCollection is actually not a part of assf but almost anything that assf does will act on the line table generated by LineCollection. The line table generated by LineCollection will have all the elements of a normal line table like start_time, actor, end_time etc but in addition, it also adds other elements. Apart from the basic fields of line table, following fields are now available to you.:</p> Fields Meaning Type duration duration of line in ms integer startFrame start frame of a line integer endFrame end frame of a line integer styleRef style table table number number of line in subtitle file integer humanizedNumber number of line as seen in Aegisub integer <p>Some of the methods LineCollection provides to us to modify subtitles are:</p> Method Usage Meaning LineCollection lines = LineCollection sub, sel Add all the selected lines to a variable named <code>lines</code>. It ignores commented lines. replaceLines lines\\replaceLines! Any change you make to <code>lines</code> will be put back to the subtitle deleteLines lines\\deleteLines! Delete all the lines lines\\deleteLines tbl Provide a table of line to delete those lines only insertLines lines\\insertLines! insert lines to subtitle file newLines\\insertLines Insert a new set of lines that you defined called newLines addline lines\\addLine add line to subtitle file <p>You can actually work in the line table generated by LineCollection without using assf as shown in an example below where we change the effect of the line to \"Actor\".</p> <pre><code>functionName = (sub, sel) -&gt;\nlines = LineCollection sub, sel\nfor line in *lines\nline.effect = \"Actor\"\nlines\\replaceLines!\n</code></pre> <p>But we'll use LineCollection alongside assf to get the most out of both of them.</p>"},{"location":"ASSFoundation/#logger","title":"Logger","text":"<p>Logger is a logging module from dependency control that you can use to log messages. If you do not pass log level, default log level is 2. By default, Aegisub's log level is set to 3 which means that the message above 3 wont be seen by end user unless they set the log level higher themself. The script exits after showing message if the log level is below 2.</p> <pre><code>logger\\log \"A simple message inside quotes\"\nlogger\\log 4, \"A simple message inside quotes but with log level 4\"\n-- dump is the most useful part of logger as far as debugging goes.\n-- You can pass a table and it'll show you a nice formatted view with all it's keys and values.\nlogger\\dump table\n-- With predefined log levels\nlogger\\fatal \"message\"                                                      -- log level 0\nlogger\\error \"message\"                                                      -- log level 1\nlogger\\warn \"message\"                                                       -- log level 2\nlogger\\hint \"message\"                                                       -- log level 3\nlogger\\debug \"message\"                                                      -- log level 4\nlogger\\trace \"message\"                                                      -- log level 5\nlogger\\assert condition, \"Show this message if the condition is false\"      -- log level 1\n</code></pre>"},{"location":"ASSFoundation/#assfoundation","title":"ASSFoundation","text":""},{"location":"ASSFoundation/#name-of-tags-as-understood-by-assf","title":"Name of tags as understood by assf","text":"Tag Assf name \\fscx scale_x \\fscy scale_y \\an align \\frz angle \\fry angle_y \\frx angle_x \\bord outline \\xbord outline_x \\ybord outline_y \\shad shadow \\xshad shadow_x \\yshad shadow_y \\r reset \\pos position \\move move \\org origin \\alpha alpha \\1a alpha1 \\2a alpha2 \\3a alpha3 \\4a alpha4 \\1c color1 \\2c color2 \\3c color3 \\4c color4 \\clip clip_vect \\iclip iclip_vect \\clip clip_rect \\iclip iclip_rect \\p drawing \\be blur_edges \\blur blur \\fax shear_x \\fay shear_y \\b bold \\i italic \\u underline \\s strikeout \\fsp spacing \\fs fontsize \\fn fontname \\k k_fill \\kf k_sweep \\ko k_bord \\q wrapstyle \\fad fade_simple \\fade fade \\t transform"},{"location":"ASSFoundation/#loop-through-all-selected-lines","title":"Loop through all selected lines","text":"<pre><code>lines = LineCollection sub, sel\nreturn if #lines.lines == 0\nlines\\runCallback (lines, line, i) -&gt;\n</code></pre> <p>This loops through all selected lines. If the number of lines is 0, exits out. Here <code>line</code> is the line table for the current line and <code>i</code> is the index of line i.e. the first selected line has index 1 and second has index 2 and so on.</p>"},{"location":"ASSFoundation/#line-data","title":"Line Data","text":"<p>This creates a line data for each line. Everything assf does will be acted on this line data.</p> <pre><code>lines = LineCollection sub, sel\nreturn if #lines.lines == 0\nlines\\runCallback (lines, line, i) -&gt;\ndata = ASS\\parse line\n</code></pre>"},{"location":"ASSFoundation/#sections","title":"Sections","text":"<p>In assf, a single line can have four different types of sections. Their names make them self-explanatory so I'll only list them.</p> <ol> <li>ASS.Section.Text</li> <li>ASS.Section.Tag</li> <li>ASS.Section.Drawing</li> <li>ASS.Section.Comment</li> </ol>"},{"location":"ASSFoundation/#work-in-different-sections-of-a-line","title":"Work in different sections of a line","text":"<pre><code>lines = LineCollection sub, sel\nreturn if #lines.lines == 0\nlines\\runCallback (lines, line, i) -&gt;\ndata = ASS\\parse line\ndata\\callback (section) -&gt;\nif section.class == ASS.Section.Tag\n-- do stuff to tags\nelseif section.class == ASS.Section.Text\n-- do stuff to text\nelseif section.class == ASS.Section.Comment\n-- do stuff to comment\nelseif section.class == ASS.Section.Drawing\n-- do stuff to drawing\n</code></pre> <p>If you care, you can download this example script and try this in different types of lines (with/without tags, comments, drawings, text, gbc etc.) to get a idea of how assf treats different sections of a line.</p> <p>If you want to work in an individual section, you can do the following:</p> <p>Example: Working with only text of line</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\n--obtain the text\ntext = section.value\n-- do stuff to text of line\n), ASS.Section.Text\n</code></pre> <p>Example: Working with only tags of line</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\nfor tags in *section\\getTags!\n-- do stuff to tags of line\n), ASS.Section.Tag\n</code></pre>"},{"location":"ASSFoundation/#modifying-text","title":"Modifying text","text":""},{"location":"ASSFoundation/#change-whole-text","title":"Change whole text","text":"<pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\nsection.value = \"Change the text to this.\"\n), ASS.Section.Text\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#append-text-to-the-existing-text","title":"Append text to the existing text","text":"<p><code>string\\append str, sep</code></p> <p>str = string you want to append to the text</p> <p>sep = string that seperates your text and str</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\nsection\\append \"string you want to append\"\n), ASS.Section.Text\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#prepend-text-to-the-existing-text","title":"Prepend text to the existing text","text":"<pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\nsection\\prepend \"string you want to prepend\"\n), ASS.Section.Text\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#replace-text","title":"Replace text","text":"<p><code>string\\replace pattern, replacement, plainMatch, useRegex</code></p> <p>If <code>useRegex</code> is true, regular expressions (re module) can be used else gsub is used for replacement.</p> <p>If <code>plainMatch</code> is true, then <code>useRegex</code> is automatically set to false and any thing that must be escaped in the pattern is escaped and any thing that must be escaped in the pattern is escaped for gsub to work.</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\nsection\\replace \"pattern you want to replace\", \"replacment for pattern\"\n), ASS.Section.Text\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#modifying-tags","title":"Modifying Tags","text":""},{"location":"ASSFoundation/#getdefaulttags","title":"getDefaultTags","text":"<pre><code>data = ASS\\parse line\nstyleTags = data\\getDefaultTags!\n-- Then we can access a table for each tag as such\nangleTable = styleTags.tags.angle\n-- We can directly get the value as:\nangle= styleTags.tags.angle\\get!\n</code></pre>"},{"location":"ASSFoundation/#insertdefaulttags","title":"insertDefaultTags","text":"Parameters Meaning Type tagnames names of tag or table of tag's name string or table index index of section i.e. 1 = first section and so on integer sectionPostion position where tag is inserted ({\\1\\2\\3...}) integer direct if true, index considers all sections and errors if index is not tag section else only considers tag sections boolean <pre><code>data = ASS\\parse line\ndata\\insertDefaultTags \"align\"                            -- Insert a single tag\ndata\\insertDefaultTags {\"scale_x\", \"scale_y\", \"blur\"}     -- Insert multiple tags\ndata\\insertDefaultTags \"fontname\", 2                      -- Insert tag at second tag block\ndata\\commit!\n</code></pre> <p>A way to change the value of the default tag you inserted is:</p> <pre><code>data = ASS\\parse line\nblur = data\\insertDefaultTags \"blur\"\nblur.value = 5\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#geteffectivetags","title":"getEffectiveTags","text":"Parameters Meaning Type index index of section of which effective tag is being required (It considers all types of sections) integer includeDefault include style tag value if override tag is not found boolean includePrevious consider the tag value of tag section before current section boolean copyTags boolean <pre><code>data = ASS\\parse line\n-- Get effective tag values for last section\ntags = (data\\getEffectiveTags -1, true, true, false).tags\n-- Then you can insert tags to line in following way\ndata\\removeTags \"align\"\ndata\\insertTags tags.align\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#removetags","title":"removeTags","text":"<p>Remove tags already present in the line</p> Parameters Meaning Type tagnames names of tag or table of tag's name string or table start index of section from where to start removing tags integer end index of selection upto which to remove tags integer relative boolean <pre><code>data = ASS\\parse line\n-- You can pass a single tag name to delete it\ndata\\removeTags \"outline\"\n-- You can pass a table of tag names to delete them all\ndata\\removeTags {\"align\", \"blur\"}\n-- Removes first instance of the tag blur\ndata\\removeTags \"blur\", 1, 1\n-- Removes second to fifth instance of the tag blur\ndata\\removeTags \"blur\", 2, 5\ndata\\commit!\n</code></pre> <p>NOTE: After you remove tags using <code>removeTags</code>, there might be stray '{}' left if that's the only tag. It is recommended that you use cleanTags to remove them. TODO: link the guide portion of clean</p> <p>It is very useful to get a value of a tag to a variable using <code>removeTags</code> as well</p> <pre><code>path = data\\removeTags({\"clip_vect\",\"iclip_vect\"})\n</code></pre>"},{"location":"ASSFoundation/#inserttags","title":"insertTags","text":"<p>Insert tags to current line.</p> Parameters Meaning Type tag tag instance you want to insert assf tag instance start index of section from where to start removing tags integer end index of selection upto which to remove tags integer relative if true, only tag section is considered (i.e. 2 = second tag section not literal 2nd section in line) boolean <pre><code>data = ASS\\parse line\ntags = (data\\getEffectiveTags -1, true, true, false).tags\ndata\\insertTags tags.shadow\ndata\\insertTags tags.scale_x, 2\ndata\\insertTags tags.scale_y, -1\n</code></pre>"},{"location":"ASSFoundation/#createtag","title":"createTag","text":"<p>Create a new instance of tags.</p> <pre><code>data = ASS\\parse line\ndata\\removeTags \"position\"\npos = ASS\\createTag 'position', 5, 50\ndata\\insertTags pos\ndata\\commit!\n</code></pre> <p>Alternatively, you can direct insert a tag without assigning it to a variable.</p> <pre><code>data = ASS\\parse line\ndata\\insertTags {ASS\\createTag 'position', 5, 50}                 -- \\pos(5,50)\ndata\\insertTags {ASS\\createTag 'outline', 5}                      -- \\bord5\ndata\\insertTags {ASS\\createTag 'blur', 0.8}                       -- \\blur0.8\ndata\\insertTags {ASS\\createTag 'move', 0, 0, 50, 50}              -- \\move(0,0,50,50)\ndata\\insertTags {ASS\\createTag 'move', 0, 0, 50, 50, 25, 500}     -- \\move(0,0,50,50,25,500)\ndata\\insertTags {ASS\\createTag 'clip_rect', 50, 50, 500, 500}     -- \\clip(50,50,500,500)\ndata\\insertTags {ASS\\createTag 'drawing', 1}                      -- \\p1\ndata\\insertTags {ASS\\createTag \"transform\", {tags}, t1, t2}       -- transfrom all tags inside {tags} from time t1 to t2\n-- creating Vectorial Clip\nm = ASS.Draw.Move\nl = ASS.Draw.Line\ndata\\insertTags {ASS\\createTag 'clip_vect', {m(0,0), l(500,500), l(700,100)}}         -- \\clip( m 0 0 l 500 500 700 100)\ndata\\commit!\n</code></pre> <p>Some tags like color and alpha can have special parameters</p> <pre><code>data\\insertTags {ASS\\createTag 'color1', 15, 34, 22}      -- b, g, r\ndata\\insertTags {ASS\\createTag 'alpha', 110}\n-- You can also give hex as a parameter\ndata\\insertTags {ASS\\createTag 'alpha', \"6E\"}\n</code></pre>"},{"location":"ASSFoundation/#replacetags","title":"replaceTags","text":"<p>Replace tags present in a line.</p> Parameters Meaning Type tagList tag instance you want to replace assf tag instance start index of section from where to start replacing tags integer end index of selection upto which to replace tags integer relative if true, only tag section is considered (i.e. 2 = second tag section not literal 2nd section in line) boolean insertRemaining if the tag you're replacing does not already exist in the line, it adds the tag to the line. boolean <pre><code>data = ASS\\parse line\nbord = ASS\\createTag \"outline\", 5\ndata\\replaceTags bord                   -- Replace all bord tags\ndata\\replaceTags bord, 2, 5, true       -- Replace bord from 2nd to 5th tag block\ndata\\commit!\n</code></pre> <p>You can also create a new instance of tag and replace it in a single line</p> <pre><code>data = ASS\\parse line\ndata\\replaceTags {ASS\\createTag \"angle\", 5}\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#gettags","title":"getTags","text":"<p>Obtain the tags present in the line.</p> Parameters Meaning Type tag name name of the tag string or table start index of section from where to look for tags integer end index of selection upto which to look for tags integer relative if true, only tag section is considered (i.e. 2 = second tag section not literal 2nd section in line) boolean <pre><code>data = ASS\\parse line\nbord = data\\getTags \"outline\"         -- A table that has all the border values in this line\nfirst = bord[1]\\get!                  -- To get the first border value\nfirst = bord[1].value                 -- Another way to get value\nnth = bord[n]\\get!                    -- Get nth border value\nfor b in *bord                        -- To get all values of border tags in a line\nlogger\\dump b\\get!\n</code></pre> <p>To get multiple tag values</p> <pre><code>data = ASS\\parse line\nfor tag in *data\\getTags {\"outline\", \"scale_x\"}\ntagname = tag.__tag.name\ntagvalue = tag\\getTagParams!\nlogger\\log \"#{tagname}(#{tagvalue})\"\n</code></pre> <pre><code>tag = data\\getTags \"tagname\", 1         -- Get first instance of tag value\ntag = data\\getTags \"tagname\", 1, 3      -- Get from first to third instance of tag value\ntag = data\\getTags \"tagname\", -1, -3    -- Get last instance of tag value\n</code></pre>"},{"location":"ASSFoundation/#modtags","title":"modTags","text":"<p>Modify tags already present in the line. If the tag is not found in the line, it does nothing.</p> Parameters Meaning Type tag name name of the tag string or table callback callback start index of section from where to modify tags integer end index of selection upto which to modify tags integer relative boolean <pre><code>data = ASS\\parse line\ndata\\modTags \"outline\", (tag) -&gt; tag\\add 1            -- Add 1 to all \\bord in the line\ndata\\modTags {\"outline\"}, ((tag) -&gt; tag\\add 1), 1, 3  -- Add 1 to \\bord in 1st to 3rd tag block\ndata\\commit!\n</code></pre> <p>You can have multiple lines for modifying tags, run functions inside them and so on.</p> <pre><code>data = ASS\\parse line\ndata\\modTags {\"scale_x\"}, (tag) -&gt;\nold_value = tag.value\nnew_value = old_value * 5\ntag.value = new_value\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#getposition","title":"getPosition","text":"<p>Get position, alignment or org.</p> Parameters Meaning Type style line style string align alignment integer forceDefault ignore override \\pos boolean <pre><code>pos, align, org = data\\getPosition!\n-- Get position of the line if alignent were 7\npos, align, org = data\\getPosition nil, 7\n-- To get the actual value {\\bord1do the following\npos_x, pos_y = pos.x, pos.y\norg_x, org_y = org.x, org,y\nan = align\n-- Alternatively, you can also do something like this if you need value\nx, y = data\\getPosition!\\getTagParams!\n</code></pre>"},{"location":"ASSFoundation/#getlinebounds","title":"getLineBounds","text":"<pre><code>data = ASS\\parse line\nbound = data\\getLineBounds!\n</code></pre> <p>Then to get co-ordinate of the bounding box:</p> <pre><code>x1, y1 = bound[1].x, bound[1].y                 -- To get co-ordinate of top left boundary\nx2, y2 = bound[2].x, bound[2].y                 -- To get co-ordinate of bottom right boundary\n</code></pre> <p>To get the dimension of the bounding box():</p> <pre><code>height = bound.h                                -- To get height of the text\nwidth = bound.w                                 -- To get width of the text\n</code></pre> <p>An easy way to check if the text is visible in the screen or not is to check if height or width is 0 or not</p> <p>To check if the text is animated or not (transform, move etc)</p> <pre><code>if bound.animated == true\nlogger\\log \"Text is animated.\"\nelse\nlogger\\log \"Text is not animated.\"\n</code></pre> <p>Then you can also loop over all the fbf lines to get their bounding box. This is also the same number of lines you'd get if you do line2fbf so you could probably do other interesting things by using this loop.</p> <pre><code>for item in *bound.fbf\nlogger\\dump item\n</code></pre>"},{"location":"ASSFoundation/#getstring","title":"getString","text":"<pre><code>data = ASS\\parse line\nline_text =  data\\getString!\n</code></pre> <p>To loop over tag blocks and get their string.</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\ntag_text = section\\getString!\n), ASS.Section.Tag\n</code></pre> <p>Something similar for text</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\ntext = section\\getString!\n), ASS.Section.Text\n</code></pre>"},{"location":"ASSFoundation/#cleantags","title":"cleanTags","text":"<p>Clean/Sort/Merge tags in the line.</p> Parameters Meaning Type Default level integer 3 mergeConsecutiveSections level for cleanTags boolean true defaultToKeep adjust position after splitting table tagSortOrder add origin if needed to maintain appearance table <p>Clean Level:</p> <ul> <li>0: no cleaning</li> <li>1: remove empty tag sections</li> <li>2: deduplicate tags inside sections</li> <li>3: deduplicate tags globally,</li> <li>4: remove tags matching the style defaults and otherwise ineffective tags</li> </ul> <pre><code>data = ASS\\parse line\ndata\\cleanTags!\ndata\\cleanTags 1\ndata\\cleanTags nil, nil, nil, tagSortOrder              -- where tagSortOrder is the table of tags\n</code></pre> <p>Note: Make sure the tagSortOrder has all the tags in the table if you want to run it. There might be some unwanted results if done otherwise. Also the tags in the tagSortOrder must be the names of the tags as understood by assf.</p>"},{"location":"ASSFoundation/#splitting-stuff","title":"Splitting Stuff","text":""},{"location":"ASSFoundation/#splitatintervals","title":"splitAtIntervals","text":"Parameters Meaning Type Default callback callback cleanLevel level for cleanTags integer 3 reposition adjust position after splitting boolean true writeOrigin add origin if needed to maintain appearance boolean <pre><code>data = ASS\\parse line\nchar = data\\splitAtIntervals 1, 4, false          -- split by characters\nchar = data\\splitAtIntervals 2, 4, true, true     -- split by 2 characters\n-- get nth split\nn_char = char[n]\n</code></pre> <p>Working with split characters:</p> <pre><code>lines = LineCollection sub, sel\n-- define newLines where we'll be adding each split characters\nnewLines = LineCollection sub\nlines\\runCallback (lines, line, i) -&gt;\ndata = ASS\\parse line\ncharLines = data\\splitAtIntervals 2, 4, false          -- split by characters\n-- Looping through each interval\nfor char in *charLines\ncharData = char.ASS\n-- get effective tag for each split\neffTags = charData.sections[1]\\getEffectiveTags(true,true).tags\n-- do stuff to each split here like adding new tags\n-- don't forget to add their position as well\n-- commit changes to the split\ncharData\\commit!\nnewLines\\addLine char\n-- add new lines that contains all the splits\nnewLines\\insertLines!\n-- remove orignal lines\nlines\\deleteLines!\n</code></pre>"},{"location":"ASSFoundation/#repositionsplitlines","title":"repositionSplitLines","text":"<p>After using any other split methods of assf, if you want the splits to maintain position, use this.</p> Parameters Meaning Type Default splitLines split lines from other split methods integer 3 writeOrigin add origin if needed to maintain appearance boolean true <pre><code>lines = LineCollection sub, sel\nnewLines = LineCollection sub\nlines\\runCallback (lines, line, i) -&gt;\ndata = ASS\\parse line\ncharLines = data\\splitAtIntervals 2, 4, false          -- split by 2 characters\ncharLines = data\\repositionSplitLines charLines\nfor char in *charLines\ncharData = char.ASS\ncharData\\commit!\nnewLines\\addLine char\nnewLines\\insertLines!\nlines\\deleteLines!\n</code></pre>"},{"location":"ASSFoundation/#splitattags","title":"splitAtTags","text":"<p>Split line at each tag block and get new lines</p> Parameters Meaning Type Default cleanLevel clean level for \\cleanTags integer 3 reposition repostion split tags boolean writeOrigin add origin if needed to maintain appearance boolean <pre><code>lines = LineCollection sub, sel\nnewLines = LineCollection sub\nlines\\runCallback (lines, line, i) -&gt;\ndata = ASS\\parse line\nsplitLines = data\\splitAtTags nil, true, true\nfor char in *splitLines\ncharData = char.ASS\n-- Here you can do stuff to each line before committing if you desire\ncharData\\commit!\nnewLines\\addLine char\nnewLines\\insertLines!\nlines\\deleteLines!\n</code></pre>"},{"location":"ASSFoundation/#stripping-stuff","title":"Stripping Stuff","text":""},{"location":"ASSFoundation/#striptags","title":"stripTags","text":"<p>Remove all tags present in the line.</p> <pre><code>data\\stripTags!\n</code></pre>"},{"location":"ASSFoundation/#striptext","title":"stripText","text":"<p>Remove all text present in the line.</p> <pre><code>data\\stripText!\n</code></pre>"},{"location":"ASSFoundation/#stripcomments","title":"stripComments","text":"<p>Remove all comments present in the line.</p> <pre><code>data\\stripComments!\n</code></pre>"},{"location":"ASSFoundation/#stripdrawings","title":"stripDrawings","text":"<p>Remove all drawings as well as <code>\\\\p</code> tags present in the line.</p> <pre><code>data\\stripDrawings!\n</code></pre>"},{"location":"ASSFoundation/#miscellaneous","title":"Miscellaneous","text":""},{"location":"ASSFoundation/#trim","title":"trim","text":"<p>Trim whitespace in the beginning or end of the text.</p> <pre><code>data\\trim!\n</code></pre>"},{"location":"ASSFoundation/#gettagcount","title":"getTagCount","text":"<p>Get the total number of tags present in the line. Start as well as inline override tags - it counts all of them.</p> <pre><code>tagCount = data\\getTagCount!\n</code></pre>"},{"location":"ASSFoundation/#gettextextents","title":"getTextExtents","text":"<p>Get the width of the text no matter it's orientation.</p> <pre><code>width = data\\getTextExtents!\n</code></pre>"},{"location":"ASSFoundation/#gettextmetrics","title":"getTextMetrics","text":"<pre><code>metrics = data\\getTextMetrics!\n-- Access different metrics\nascent = metrics.ascent\ndescent = metrics.descent\ninternal_leading = metrics.internal_leading\nexternal_leading = metrics.external_leading\nheight = metrics.height\nwidth = metrics.width\n</code></pre>"},{"location":"ASSFoundation/#getsectioncount","title":"getSectionCount","text":"<p>Get the exact count of the type of section</p> <pre><code>tagSectionCount = data\\getSectionCount ASS.Section.Tag\ntextSectionCount = data\\getSectionCount ASS.Section.Text\ndrawingSectionCount = data\\getSectionCount ASS.Section.Drawing\ncommentSectionCount = data\\getSectionCount ASS.Section.Comment\n</code></pre>"},{"location":"ASSFoundation/#gettextlength","title":"getTextLength","text":"<p>Get the total number of characters in the text. Letters, spaces and punctuations.</p> <pre><code>len = data\\getTextLength!\n</code></pre>"},{"location":"ASSFoundation/#isanimated","title":"isAnimated","text":"<p>Check if the text is animated or not. Checks if there are transforms, move, fade or karaoke tags. It's intelligent enough to know that a single frame line can't be animated so it'll return false even if a single frame line has those tags.</p> <pre><code>checkAnimated = data\\isAnimated!\n</code></pre>"},{"location":"ASSFoundation/#reverse","title":"reverse","text":"<p>It reverses the text of the current line. <code>It's huge.</code> will become <code>.eguh s'tI</code>. This is sometimes useful but the most useful part of this function is that it keeps the tags intact. So for example if you run this in gbc, the gbc will remain intact while the text will be reversed.</p> <pre><code>data\\reverse!\n-- you can also save it to a variable and do some stuff to it before committing it\nrev = data\\reverse!\n</code></pre>"},{"location":"ASSFoundation/#working-with-move","title":"Working with move","text":"<p>Check if move exists in a line</p> <pre><code>data = ASS\\parse line\npos = data\\getPosition!\nif pos.class == ASS.Tag.Move\nlogger\\log \"Move exists\"\nelse\nlogger\\log \"Move does not exist\"\n</code></pre> <p>Check if the move is simple or not</p> <pre><code>-- if move is simple \"\\move(x1,y1,x2,y2)\"\npos.__tag.signature == \"simple\"\n-- else \"\\move(x1,y1,x2,y2,t1,t2)\"\npos.__tag.signature == \"default\"\n</code></pre> <p>Obtain values of move tag</p> <pre><code>if pos.class == ASS.Tag.Move and pos.__tag.signature == \"simple\"\nx1, y1, x2, y2 = pos\\getTagParams!\nelseif pos.class == ASS.Tag.Move and pos.__tag.signature == \"default\"\nx1, y1, x2, y2, t1, t2 = pos\\getTagParams!\n</code></pre> <p>It is also possible to obtain each value individually if you desire.</p> <pre><code>x1, y1 = pos.startPos\\get!\nx2, y2 = pos.endPos\\get!\nt1 = pos.startTime\\get!\nt2 = pos.endTime\\get!\n</code></pre>"},{"location":"ASSFoundation/#working-with-transform","title":"Working with transform","text":"<p>There are 3 types of transform</p> <ol> <li>\"accel\" - \\t(accel,style modifiers)</li> <li>\"default\" - \\t(t1,t2,accel,style modifiers)</li> <li>\"time\" - \\t(t1,t2,style modifiers)</li> </ol> <p>To check if tags are transformed</p> <pre><code>data = ASS\\parse line\ntags = data\\getEffectiveTags -1, true, true, false\ntransformed = tags\\checkTransformed!\n-- Get the list of all the tags that were transformed\nfor key, _ in pairs transformed\nlogger\\log key\n</code></pre> <p>To get the idea of how transform table is structured, you can run the following script</p> <p>Obtain all parameters of transforms</p> <pre><code>data = ASS\\parse line\ntransforms = data\\getTags \"transform\"\nfor tr in *transforms\nt1, t2, tags = tr\\getTagParams!\n</code></pre> <p>Change the times or accel in transforms (Here adding 100 to start time, 200 to end time and 5 to accel of all transforms)</p> <pre><code>data = ASS\\parse line\ntransforms = data\\getTags \"transform\"\nfor index, tr in ipairs transforms\ntr.startTime\\add 100\ntr.endTime\\add 200\ntr.accel\\add 5\ndata\\commit!\n</code></pre> <p>Modify tags inside transforms (In this case add 50 to fscx as an example)</p> <pre><code>data = ASS\\parse line\ntransforms = data\\getTags \"transform\"\nfor index, tr in ipairs transforms\nfor tag in *tr.tags\\getTags!\nif tag.__tag.name == \"scale_x\"\ntag\\add 50\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#working-with-fade","title":"Working with fade","text":"<p>There are two types of fade. Simple fade (\\fad) and complex fade (\\fade).</p> <pre><code>-- Simple fade\nfad = data\\getTags \"fade_simple\"      -- Get simple fade\nt1, t2 = fad\\getTagParams!            -- Get parameters of simple fade\n-- Complex fade\nfade = data\\getTags \"fade\"                            -- Get complex fade\na1, a2, a3, t1, t2, t3, t4 = fade\\getTagParams!       -- Get parameters of simple fade\n</code></pre> <p>Parameters of fade tags:</p> Parameters in assf Equivalent fade parameters inAlpha a1 midAlpha a2 outAlpha a3 inStartTime t1 inDuration t2 outStartTime t3 outDuration t4 <p>Modifying fades</p> <pre><code>for tag in *data\\getTags {'fade'}\ntag.inStartTime -= 150\ntag.outStartTime -= 150\n</code></pre>"},{"location":"Add%20Grain/","title":"Add Grain","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>The script <code>Add Grain</code> allows you to emulate the grain texture in your sign. This script closely follows the manual approach of creating grain from this guide. All you need to do before using this script is to install the grain font from this link</p>"},{"location":"Add%20Grain/#usage","title":"Usage","text":"<p>You can run this script from the menu as well as from the GUI. <code>Add grain</code> from the menu adds simple grain while <code>Add dense grain</code> makes the grain a little denser using shad trick. If you want even denser grain than that, you need to use the GUI.</p> <p></p> <p>In the GUI, you can increase the <code>Grain Intensity</code> to increase the density of the grain. Normally the script makes the grain in pure white and pure black color as recommended in the guide but in cases where you need custom grain color, you can set it in the GUI as well.</p>"},{"location":"Add%20Grain/#static-grain","title":"Static Grain","text":"<ul> <li> <p>Cover your sign with <code>!</code> as shown in the image above. It is easier to do this if you use <code>\\an7</code> and break the line using <code>\\N</code> whenever it goes beyond the sign. You do not need to add or modify any tags like <code>\\fn</code>, <code>\\bord</code>, <code>\\shad</code> etc. The script will do it for you. The only tag you might want to change before adding <code>!</code> is <code>\\fsc[xy]</code>. Higher the value of scale, lighter the grain and vice versa.</p> </li> <li> <p>Run the script and choose one of the two options in the menu or from the GUI. The script will, in order, check if the font <code>grain.ttf</code> is installed, replace <code>!</code> with random characters, split the line to pure white and pure black layers, set the line border and shadow to 0 and add necessary tags like fontnames, color and alpha.</p> </li> <li> <p>Adjust the alpha, blur and scale until it looks like surrounding grain.</p> </li> <li> <p>Clip the line with grain to the text or shape if required.</p> </li> </ul>"},{"location":"Add%20Grain/#dynamic-grain","title":"Dynamic Grain","text":"<ul> <li> <p>Cover your sign with <code>!</code> as described above for static grain.</p> </li> <li> <p>Clip the line to the text or shape if required.</p> </li> <li> <p>Split the line into frames using scripts like Hyperdimensional Relocator or SplitTimer. In some cases, you can go further and check if the anime is animated on twos or threes and use <code>SplitTimer</code> to split line in <code>n</code> frames accordingly instead of splitting into lines with 1 frame each.</p> </li> <li> <p>Select all the lines and run the script. The result will be dynamic grain.</p> </li> </ul>"},{"location":"Auto%20Fade/","title":"Auto Fade","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p><code>Auto Fade</code> allows you to determine the fade in and fade out time of a sign. Manually determining them requires you to step through frames of the video and find the frame where fade in ends or fade out starts and then add the fade tag to the line. This script automates all of those steps.</p> <p>Warning</p> <p>This script only works in arch1t3cht's Aegisub.</p>"},{"location":"Auto%20Fade/#usage","title":"Usage","text":""},{"location":"Auto%20Fade/#static-sign","title":"Static Sign","text":"Your browser does not support the video tag.  <ul> <li>Time your sign.</li> <li>Determine if your sign has fade in, fade out or both.</li> <li>Play the video until you reach any frame in which there is neither fade in nor fade out.</li> <li>Now you have two options. Either add a single point <code>clip/iclip</code> over the sign as shown in first example of the video or hover over the Japanese sign, right click and choose \"Copy coordinates to Clipboard\" as shown in the second example of video above.</li> <li>Open the script (while staying in the same video frame). The co-ordinate should have automatically be picked up and shown in the GUI. Then choose <code>Fade in</code> or <code>Fade out</code> or <code>Both</code> button depending on what you want.</li> <li>The script will automatically add appropriate fade to your text.</li> </ul>"},{"location":"Auto%20Fade/#moving-sign","title":"Moving Sign","text":"Your browser does not support the video tag.  <p>If your sign is moving and you also have motion tracking data for the sign, Available, you can use that data to determine the fade for such moving sign as well.</p> <p>All the steps are the same as shown above except before you click the button, paste the tracking data in the text box and change the drop-down from <code>Single Co-ordinate</code> to <code>Tracking Data</code>.</p>"},{"location":"Bidirectional%20Snapping/","title":"Bidirectional Snapping","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>Info</p> <p>If you use my <code>Timing Assistant</code> script, there is no need to use this script anymore.</p> <p>This script is made to be hotkeyed to allow you to snap to start or end of the the line to frame before or ahead respectively while timing. While there are other scripts that allow you snap to keyframes, they are either a simple snap to adjacent keyframes or a TPP style snapping scripts.</p> <p>While timing, you might have come across the case multiple times when you go to the next line only to realize that the end time of the line overshoots the keyframe you want to snap to. Then you have no choice but to snap backwards using mouse. Here's where this script comes handy. This script is made to be hotkeyed, so first hotkey the end snapping and the start snapping function in the audio section. When you press the hotkey to snap end once, it snaps to the keyframe ahead. If you press the same hotkey again, it snaps to the keyframe behind. Then every press of the hotkey will continue snapping to previous keyframe. This way, you can snap to the keyframe ahead or behind using the same hotkey. For the start time, the opposite happens. One press snaps behind, and then double press snaps forward.</p> <p>I use Bidirectional Snapping in combination with this script which is also hotkeyed and allows me to link the previous line to current line without moving to previous line.</p> <p>An attempt has been made below to showcase its usage, but you should use it yourself to see how it works. Here, <code>w</code> has been hotkeyed to end-snapping and <code>q</code> has been hotkeyed to beginning-snapping.</p>  Your browser does not support the video tag."},{"location":"Edit%20Tags/","title":"Edit Tags","text":"<p>Not Available in Dependency Control</p> <p>Link to script</p> <p>The main idea is that it presents the tags, and it's value of the current line in a HYDRA like GUI so that I can easily edit the values of that tag. It is mostly useful for complex lines that has a lot of tags. It separates start tags, inline tags and transforms in different sections for easy editing.</p> <p>When you run the script on a line, following GUI is generated:</p> <p></p> <p>I've tried to make GUI as similar to HYDRA as possible since the familiarity helps with finding which tags you want to edit. The tags present in your lines are ticked and the effective tag values are pre-filled. Here effective tags value means that if the tag is not available in the line, the tag value is taken from style. Not only you can change the value of the ticked tag in the GUI, but you can also tick any tags of the GUI to add that tag to the line. You can also untick any tag to remove them from the line. The order of your tags are respected.</p> <p>While I did not plan to add an option to modify tags in multiple lines, for the sake of completion, I added one nonetheless. Its usefulness is highly doubtful. I took inspiration from unanimated's Modifire. In short, if you select multiple lines and run the script, following GUI will be shown which shows tags in all the selected lines without duplication. It's essentially find and replace for tags i.e. if you change the value of the tag in the GUI, all the instances of that said tag will be modified. However, the difference is that you can find and replace as many tags as you want all at once.</p> <p></p>"},{"location":"Extrapolate%20Tracking/","title":"Extrapolate Tracking","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>When you're motion-tracking a sign, and you cannot track the first or last few frames either because the sign moved out of the screen or it faded out, you can use this script to extrapolate the tracking for those lines.</p> <p>What this script does:</p> <ul> <li>Gathers position, scale and rotation data from selected lines</li> <li>Uses k-fold cross validation to find a proper degree of polynomial to fit the data (and some other fuckery when proper degree cannot be found.)</li> <li>Uses that degree to extrapolate the data</li> <li>Generates motion tracking data from the extrapolated data</li> <li>Uses Aegisub Motion internally to apply that motion tracking data</li> </ul>"},{"location":"Extrapolate%20Tracking/#screenshot","title":"Screenshot","text":""},{"location":"Extrapolate%20Tracking/#usage","title":"Usage","text":"<p>Requirements</p> <ul> <li>All selected lines must be 1 frame long.</li> <li>Selection must be consecutive and sorted by time.</li> <li>If lines are split in layers, run the script separately for each layer.</li> </ul> <ul> <li>Try your best to track using Mocha or Blender. It's better to get proper track for as many frames as you can.</li> <li>Apply the motion tracking data to the line. Delete the badly tracked lines in the beginning or end if necessary.</li> <li>Select all the lines and run the script.</li> <li>Choose if you want to extrapolate at start or end using the drop-down in GUI.</li> <li>Enter how many additional frames you want to extrapolate.</li> <li>Click on <code>Apply</code> button.</li> </ul>"},{"location":"Extrapolate%20Tracking/#examples","title":"Examples","text":"<p>Info</p> <p>The graph generated in the video is for demonstration and debuggin purposes only. It'll not pop up everytime you use script.</p>"},{"location":"Extrapolate%20Tracking/#extrapolation-of-linear-track","title":"Extrapolation of linear track","text":"Your browser does not support the video tag."},{"location":"Extrapolate%20Tracking/#extrapolation-of-non-linear-track","title":"Extrapolation of non-linear track","text":"Your browser does not support the video tag."},{"location":"Extrapolate%20Tracking/#extrapolation-of-circular-track","title":"Extrapolation of circular track","text":"<p>Warning</p> <p>In some cases like in the example shown below, when the line rotates about a single origin point, you should disable <code>Origin</code> in the gui for proper extrapolation.</p>  Your browser does not support the video tag."},{"location":"Fit%20Text%20in%20Clip/","title":"Fit Text in Clip","text":"<p>Not Available in Dependency Control</p> <p>Link to script</p>  Your browser does not support the video tag.  <p>This script will fit the text in the current line inside the rectangular clip and try to make it justified.</p> <p>Warning</p> <p>This script uses Yutils to determine the width of the text. Therefore, the efficacy of this script entirely depends on whether Yutils can accurately determine the width of the text.</p>"},{"location":"Fit%20Text%20in%20Clip/#usage","title":"Usage","text":"<ul> <li>Add <code>\\an7</code> to the line.</li> <li>Move the line so that the top left corner of text is exactly where it should be.</li> <li>Draw a rectangular clip starting very close to top left corner of the text such that the width of the clip is equal to the length of the text you want to be fitted to.</li> <li>Run the script.</li> </ul>"},{"location":"Fold%20Operations/","title":"Fold Operations","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>If you use arch1t3cht's Aegisub, then it comes with a feature to visually group and collapse lines in the subtitle grid called folds.</p> <p>This script allows you to perform various operations on such folds.</p> <p>Info</p> <p>The whole point of this script is to perform operations on all lines of a fold at once. So if you are in any line of a fold and you run the script, it'll affect all the lines in that fold which means in many cases, you don't even need to open fold to run these operations in that fold.</p>"},{"location":"Fold%20Operations/#screenshots","title":"Screenshots","text":"<p>Fold Operations Menu:</p> <p></p> <p>Fold Operations GUI:</p> <p></p>"},{"location":"Fold%20Operations/#usage","title":"Usage","text":"<p>Before I explain the usage of this script, there are two popular ways I've noticed people use folds. One is to simply select all the lines and create folds and another is to add commented lines at the start and end of lines where the first line has name for the fold. If you use commented lines, go to the GUI of the script and tick <code>Comments around fold</code> under config before doing anything else.</p> Fold with commentsSame fold without comments <p></p> <p></p> <p>Tip</p> <p>I personally prefer to use comments around my fold since it is cleaner and instantly allows me to recognize the signs among the list of folds. This script has an operation that will allow you to easily create named folds with comments.</p>"},{"location":"Fold%20Operations/#operations","title":"Operations","text":""},{"location":"Fold%20Operations/#select-current-fold","title":"<code>Select Current Fold</code>","text":"<p>This selects all the lines in the fold. If you want to, for example, run <code>ASSWipe</code> on all lines in a fold, use this to select all the lines and wipe.</p>"},{"location":"Fold%20Operations/#create-fold-around-selected-lines","title":"<code>Create Fold Around Selected Lines</code>","text":"<p>Select all the lines which you want to add to fold and run this. A GUI will prompt you to enter name for the fold. The script will then insert commented lines with name and create a fold with selected lines.</p>"},{"location":"Fold%20Operations/#comment-current-fold","title":"<code>Comment Current Fold</code>","text":"<p>This comments all the lines in current fold. If a line was already commented before running this, the script remembers it.</p>"},{"location":"Fold%20Operations/#uncomment-current-fold","title":"<code>Uncomment Current Fold</code>","text":"<p>This uncomments all the lines in current fold. If the script remembers that a line was commented before running <code>Comment Current Fold</code>, it does not uncomment them.</p>"},{"location":"Fold%20Operations/#delete-current-fold","title":"<code>Delete Current Fold</code>","text":"<p>This deletes all the lines of current fold.</p>"},{"location":"Fold%20Operations/#copy-current-fold","title":"<code>Copy Current Fold</code>","text":"<p>This copies all the lines in the current fold along with it's fold state and styles to system clipboard.</p>"},{"location":"Fold%20Operations/#cut-current-fold","title":"<code>Cut Current Fold</code>","text":"<p>This copies all the lines in the current fold along with it's fold state and styles to system clipboard and deletes the fold.</p>"},{"location":"Fold%20Operations/#paste-current-fold","title":"<code>Paste Current Fold</code>","text":"<p>This pastes all the lines in a fold that was copied or cut using this script. The fold copied from one Aegisub window can be pasted in the same or different Aegisub window.</p> <p>Info</p> <p>If the file in another Aegisub window does not have styles of copied lines, those styles will also be added to new file.</p>  Your browser does not support the video tag."},{"location":"KFX/","title":"KFX","text":"<p>Not Available in Dependency Control</p> <p>Link to script</p> <p>This script is designed to write or modify karaoke template lines for The0x539's KaraTemplater</p>  Your browser does not support the video tag."},{"location":"KFX/#buttons","title":"Buttons","text":"<ul> <li>Next: Proceed to next step</li> <li>Insert: Insert a new line above the current selected line</li> <li>Replace: Replace the current selected line</li> <li>Modify: Modify the template in the current selected line</li> </ul>"},{"location":"KFX/#first-window-line-marker","title":"First Window - Line Marker","text":"<p>The first window allows you to select line markers. You won't be able to proceed unless you select a line marker.</p>"},{"location":"KFX/#second-window-modifiers","title":"Second Window - Modifiers","text":"<p>The second window allows you to choose modifiers. This is not compulsory, and you can proceed without choosing anything. For modifiers that need extra arguments, you can type them in the textbox. The options are dynamic i.e. only the modifiers available for the chosen line markers are available for choosing.</p>"},{"location":"KFX/#third-window-effect","title":"Third Window - Effect","text":"<p>The third window allows you to write the actual effects. If you chose <code>code</code> line marker, a text box will appear where you can write your code. Variables can be written one variable per line. Function can be written as you write in your IDE. Indentation is purely visual and not necessary, but you can indent with tabs or spaces if you wish.</p> <p></p> <p>For any other line marker, a HYDRA type GUI will appear. Every box is a textbox so that you can write value, variables or function. If you don't find any option for what you want to write, the <code>Additional</code> option is for you.</p> <p>If you tick transform, this same GUI will be reloaded for you to write tags inside the transform section.</p> <p>In the bottom, there are boxes for the effect, actor and text. While these are for giving you information of current state of template line, you can edit it manually, and it will be saved.</p>"},{"location":"Quality%20Report/","title":"Quality Report","text":"<p>Not Available in Dependency Control</p> <p>Link to script</p> <p></p> <p>This script is designed to write and generate QC reports from Aegisub. If you wish to write QC reports using a media player, there is a program called mpvQC which is designed to do just that.</p> <p>The top row of the GUI consists of configurable sections like timing, typesetting etc. that you can tick to specify the type of note. If nothing is ticked, it's treated as a general note. Below that is a drop-down which has pre-made reports for each sections for making even faster notes.</p> <p>Below that is a textbox where you are free to write you report. The way you format your report in the textbox is preserved. If you selected any pre-made reports, it is appended to the beginning of the text in the text-box. You can leave this box empty and only select the pre-made report.</p> <p>Finally, there is a checkbox called <code>Use video frame</code>. Normally, the report is added to current line but if you tick this, the report is added on the basis of the current video frame. If the current video frame has a subtitle, then the report is added to that line. If there isn't, then an empty line with report is inserted whose time is same as the video frame.</p> <p>After you write all your notes, you can generate a report and a properly formatted note will with time will be generated that you can copy and share. The generated report is fully compatible with arch1t3cht's Note Browser script. After you generate the report, and you no longer need them in your subtitle, you can clean them up too.</p> <p></p> <p>There is also a config where you can configure a lot of things about the script so be sure to check that out.</p>"},{"location":"Remove%20Tags/","title":"Remove Tags","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p></p> <p>This script deals with all things related to removing tags from the line. One of the main motivation for writing this script when a script like unanimated's <code>Script Cleanup</code> exists is because I would spend a lot of time searching the exact tag I wanted to remove from the 40 options of the GUI. When I have only 10 tags, I wanted to choose the tags I want to remove from those 10 tags only. So, GUI of this script is dynamically generated i.e. only tags that are available in the selected lines are available for you to remove. The GUI from the image above is not what you'll see when you run it.</p>"},{"location":"Remove%20Tags/#remove-all-button","title":"<code>Remove All</code> button","text":"<ul> <li>If you simply click the <code>Remove All</code> button, it removes all the tags form the selected lines.</li> <li>If you check <code>Start Tags</code> in the top row and then press <code>Remove All</code> button, it removes all start tags from selected lines.</li> <li>Similarly, checking <code>Inline Tags</code> in top row removes all inline tags.</li> </ul>"},{"location":"Remove%20Tags/#remove-tags-button","title":"<code>Remove Tags</code> button","text":"<ul> <li>All the tags that you individually tick would be removed.</li> <li>If <code>Start tags</code> is checked, the selected tags will only be removed from start tags.</li> <li>If <code>Inline tags</code> is checked, the selected tags will only be removed from inline tags.</li> <li>If <code>Transform</code> is checked, the selected tags will only be removed from transforms.</li> <li>If <code>Inverse</code> is checked, all the tags except the selected ones will be deleted.</li> </ul>"},{"location":"Remove%20Tags/#remove-group-button","title":"<code>Remove Group</code> button","text":"<p>This button executes the things you select in the left column and is mostly used to delete groups of tags at once. Staying true to it's mission, the script also dynamically creates this section. Which means that if your selection does not contain any color tags for example, the option to remove color tags won't be available. You can also tick <code>Start Tag</code> or <code>Inline Tag</code> the top row and only remove the tag group from start tag block or inline tag block only. The groups available are:</p> <ul> <li>All color tags (c, 1c, 2c, 3c, 4c)</li> <li>All alpha tags (alpha, 1a, 2a, 3a, 4a)</li> <li>All rotation tags (frz, frx, fry)</li> <li>All scale tags (fs, fscx, fscy)</li> <li>All perspective tags (frz, frx, fry, fax, fay, org)</li> <li>All inline tags except last (useful for undoing gradient)</li> </ul>"},{"location":"Rotated%20Gradient/","title":"Rotated Gradient","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p></p> <p></p> <p><code>Rotated Gradient</code> allows you to create a gradient at an angle using clips. Traditionally, to create a rotated gradient, you'd have to create a small strip of shapes. That would make it impossible to edit the sign afterwards.</p>"},{"location":"Rotated%20Gradient/#usage","title":"Usage","text":"Your browser does not support the video tag.  <ul> <li> <p>Ready the text or shape which you want to gradient.</p> </li> <li> <p>Duplicate the line and change tags in the duplicated line.</p> </li> </ul> <p>Info</p> <p>You can duplicate it twice to have 2 stop gradient. This basically means duplicate the line <code>n</code> times to create <code>n</code> stop gradient</p> <ul> <li> <p>Draw 3 point vectorial clip in clockwise direction in any of the line. The first two points determines the direction of gradient and the last point determines the distance upto which the gradient must continue.</p> </li> <li> <p>Run the script. In the GUI, select the pixel for each line, accel and tick all the tags you want to gradient.</p> </li> </ul> <p>Warning</p> <p>If your text has border and shadow, you must split the lines into layers with and without border and then depending on if you want to gradient fill or border and shadow, run the script in that layer. Otherwise, you may see strips in you line. This is not a limitation of this script. This is limitation of ASS rendering.</p>"},{"location":"Timing%20Assistant/","title":"Timing Assistant","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>When I time, I always make a series of decision for every line. Do I need to add lead in, lead out, snap to keyframes or link the lines? So I wanted to create a script that allows me to do it in a press of a hotkey. You might be thinking, \"Phos, you just made a TPP\". I can assure you it's not. The workflow of using this script is the same as timing without TPP, but only difference is that the aforementioned decisions is made for you by the script.</p> <p>How to use:</p> <p></p> <p>The first thing to do after you install the script is to set up the config. By default, it contains the values I use and what I consider sane defaults. You are however free to change it and the script will perform as intended as long as the values you put are within reason. The second thing to do is of course hotkey the script in audio section.</p> <p>Now you are ready for timing. Here, you'll first do the exact timing on the line and then press the hotkey. The script will make the decision for you whether it should add lead in, snap to keyframe, link the lines together or add lead out. You then move to the next line by pressing 'g' and repeat. Exact time, hotkey. Exact time, hotkey. That's it.</p> <p>I have come to like this method because it has the convenience of decision-making of TPP but at the same time, if I do not agree with the script, I am free to fix it and move to next line.</p> <p>Note: If the end time of your line exceeds the audio of next line, don't fix it. Go to the next line, exact time it and then press the hotkey. The script will fix it. It works in this manner because it can only make proper decision of line linking of current line in context of start time of next line.</p> <p>If you want to check exactly what steps the script takes for decision-making, expand the following and let me know if I got something wrong.</p> Click here to expand <p>For start time:</p> <ol> <li>If start time is already snapped to keyframe, it does not make any changes to the start time.</li> <li>Checks if there is a keyframe within the time specified in the config and snaps to it.</li> <li>If it was not snapped, it checks the end time of previous line. If it is within the linking time specified in config and not snapped to keyframe, it adds lead in to current line and extends the end time of the previous line.</li> <li>If it was neither snapped nor linked, it simply adds lead in.</li> </ol> <p>For end time:</p> <ol> <li>If end time is already snapped to keyframe, it does not make any changes to the end time.</li> <li>Here's a special step that is only applicable when your keyframe snapping value is greater than 850 ms. Snapping to keyframes more than 850 ms away is not always the correct thing to do, hence this special step. If the script finds that there is a keyframe 850+ ms away from exact end, and you've allowed to snap to that distance in config, then it first checks cps of the line (without leadout). If cps is greater than 15, then it snaps to keyframe. If the cps is less than 15, then it either tries to add lead out to the line or extend the end time such that it is 500 ms away from keyframe whichever is lesser.</li> <li>If above special case is not true(which is most of the case), it simply checks if there is a keyframe within time specified in the config and snaps to it.</li> <li>If it did not snap, it simply adds lead out to the line.</li> </ol>"},{"location":"Vector%20Gradient/","title":"Vector Gradient","text":"<p>Not Available in Dependency Control</p> <p>Link to script</p> <p>The original idea for using vector shapes to create gradient was shared by Noroino Hanakao . This script only automates this process.</p> <p>The main idea is that this script creates shapes that when blurred gives you a gradient. The main benefit of using this over clip gradient is that this can create gradient in one line which makes it easier to motion track and manipulate.</p>"},{"location":"Vector%20Gradient/#usage","title":"Usage","text":"Your browser does not support the video tag.  Name Number of clip points Gradient type Wedge 3 Linear Ring 2 Radial Star 2 Radial <ul> <li> <p>Create the vectorial clip with the required number of clips. For wedge, create the clip in clockwise direction.</p> </li> <li> <p>Run the script and choose which type of gradient you want.</p> </li> </ul>"},{"location":"Vector%20Gradient/#examples","title":"Examples","text":"<p>Example 1:</p> Rectangular mask gradientSame mask without blur <p></p> <p></p> <p>Example 2:</p> Text gradientSame text without blur <p></p> <p></p>"},{"location":"Wave/","title":"Wave","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p></p> <p>Wave is a script that allows you to mimic the wavy signs through some fscx, fscy and fsp trickery. When you open the scripts, there are few parameters you can change, and you'll have to go through some trial and error to determine what values give you the result you want.</p> <p>Credits for the original code excerpt before my modification goes to The0x539</p> <p>Below are few examples of what kind of waves you can achieve but depending on the values you use, you can create different types of waves as well.</p>  Your browser does not support the video tag."},{"location":"Wobble/","title":"Wobble","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>Wobble is a remake of a very old script that distorts the text with the parameters you choose. The old script however was very difficult to use. It neither recognized the text already present in the line nor the tags used nor did it output the result in a usable format. So I decided to remake it and add other features.</p> <p></p> <p>When you open the script, you will be presented with the GUI as shown above. Imagine that when you use this script, it distorts the text along a wave horizontally or vertically or both. The parameters control the nature of the wave thus controls how the text is distorted. Frequency is the number of waves (crest and trough) you want in the text in percentage. You'll most likely use 20-40% for optimum results. Strength is the number of pixels that the text will be distorted to. With trial and error, you can create many interesting distortions.</p> <p>As you can see below, the top is the original font and everything below it is distorted using this script. I use it when the sign is distorted or I need an irregular font that I cannot find.</p> <p></p> <p></p>"},{"location":"Wobble/#animate-the-distortion","title":"Animate the distortion","text":"<p>If you want to animate the distortion, first split the line to frames. You can use something like petzku's script to do so. You can control the speed of animation by controlling the number of frames each line has. The more frames per line, the slower the animation. After splitting the line to frames, you need to put the starting value and ending value. I recommend you figure this out beforehand by using main GUI. After you put the starting and ending value for all the required elements, click on <code>Animate</code> and the script will handle the rest.</p> Click here to see example animations  Your browser does not support the video tag.   Your browser does not support the video tag.  <p></p>"},{"location":"svg2ass/","title":"svg2ass","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>The script svg2ass is a wrapper for a program svg2ass which allows you to select an SVG file from Aegisub itself and convert it to shape, clip or iclip. It works in both windows and Unix operating system. I generally create SVG files using GIMP(can perform complex selections and convert those selections to SVG in a matter of seconds) or Inkscape and use svg2ass to convert them to subtitle lines.</p> <p>Info</p> <p>If you cannot/do not want to compile svg2ass, there is also a website where you can upload the SVG file to obtain the output.</p> <p>The first thing you should do is to set the config and provide the path where you have the svg2ass executable. At the same time, you can also provide custom tags you want to append to final result and the custom svg2ass parameters if you prefer.</p> <p></p> <p>To use this script, simply click on <code>Import</code> button and select the SVG file. The resulting lines will have the same start time, end time and style as the selected line. If you checked clip or iclip in the GUI, the resulting shape will be converted to clip or iclip respectively. Alternatively if you don't have the svg2ass executable, you can get the output of svg2ass from the website and paste the result in the textbox and click on the <code>Textbox</code> button. The resulting lines will the same as <code>Import</code>.</p> <p></p>"}]}